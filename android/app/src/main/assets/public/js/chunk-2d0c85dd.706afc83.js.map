{"version":3,"sources":["webpack:///./src/views/Authenticated/Settings/Notification.vue","webpack:///./src/views/Authenticated/Settings/Notification.vue?24df","webpack:///./src/views/Authenticated/Settings/Notification.vue?a0f6"],"names":["class","slot","fullscreen","notification","notif","index","key","lines","header","handleChange","isChecked","$event","target","checked","value","color","subHeader","components","IonContent","IonHeader","IonPage","IonTitle","IonToolbar","IonBackButton","IonItem","IonLabel","IonToggle","IonNote","setup","router","store","user","state","users","notifications","JSON","parse","event","dispatch","render"],"mappings":"wJAOmB,yB,GAITA,MAAM,0B,saAVd,eA2BW,Q,wBA1BT,iBAOa,CAPb,eAOa,Q,wBANX,iBAKc,CALd,eAKc,Q,wBAJZ,iBAEc,CAFd,eAEc,GAFDC,KAAK,SAAO,C,wBACvB,iBAAmC,CAAnC,eAAmC,O,MAErC,eAA4C,Q,wBAAjC,iBAAqB,C,gCAGpC,eAiBc,GAjBAC,YAAY,EAAMF,MAAM,e,yBACrC,iBAeM,CAfN,eAeM,MAfN,EAeM,CAdF,eAaS,Q,wBAZoC,iBAAsC,E,mBAA/E,eAWM,2BAX4D,EAAAG,cAAY,SAA7BC,EAAOC,G,wBAAxD,eAWM,OAXDL,MAAM,8BAAsEM,IAAKD,G,CAClF,eAQU,GARAE,MAAM,QAAM,C,wBACnB,iBAAuC,CAAvC,eAAuC,Q,wBAA5B,iBAAgB,C,8BAAdH,EAAMI,QAAM,O,WACzB,eAKa,GAJR,YAAS,mBAAE,EAAAC,aAAaL,EAAMM,UAAYC,EAAOC,OAAOC,UACxDC,MAAOV,EAAMU,MACbD,QAAST,EAAMM,UAChBK,MAAM,W,yDAGd,eAA+D,GAArDf,MAAM,kBAAgB,C,wBAAC,iBAAmB,C,8BAAjBI,EAAMY,WAAS,O,sHCJnD,iBAAgB,CAC7BC,WAAY,CACVC,WAAA,OACAC,UAAA,OACAC,QAAA,OACAC,SAAA,OACAC,WAAA,OACAC,cAAA,OACAC,QAAA,OACAC,SAAA,OACAC,UAAA,OACAC,QAAA,QAEFC,MAb6B,WAczB,IAAMC,EAAS,iBACTC,EAAQ,iBACRC,EAAO,gBAAS,kBAAMD,EAAME,MAAMC,MAAMF,QACxC5B,EAAe,iBAErB,gBAAU,WACH4B,EAAKjB,MAAMoB,cACV/B,EAAaW,MAAQqB,KAAKC,MAAML,EAAKjB,MAAMoB,eAE5C/B,EAAaW,MAAQ,CAClB,CACIN,OAAQ,eACRQ,UAAW,yCACXF,MAAO,eACPJ,WAAW,GAEf,CACIF,OAAQ,eACRQ,UAAW,sCACXF,MAAO,eACPJ,WAAW,GAEf,CACIF,OAAQ,aACRQ,UAAW,qCACXF,MAAO,aACPJ,WAAW,GAEf,CACIF,OAAQ,WACRQ,UAAW,4CACXF,MAAO,WACPJ,WAAW,GAEf,CACIF,OAAQ,kBACRQ,UAAW,mDACXF,MAAO,kBACPJ,WAAW,GAEf,CACIF,OAAQ,aACRQ,UAAW,8CACXF,MAAO,aACPJ,WAAW,OAKzB,IAAMD,EAAY,yDAAG,WAAO4B,GAAP,iGACXP,EAAMQ,SAAS,4BAA6BnC,EAAaW,OAD9C,2CAAH,sDAGpB,MAAO,CACHe,SACA1B,eACAM,mBCrFR,EAAO8B,OAASA,EAED","file":"js/chunk-2d0c85dd.706afc83.js","sourcesContent":["<template>\n  <ion-page>\n    <ion-header>\n      <ion-toolbar>\n        <ion-buttons slot=\"start\">\n          <ion-back-button></ion-back-button>\n        </ion-buttons>\n        <ion-title>Notification Settings</ion-title>\n      </ion-toolbar>\n    </ion-header>\n    <ion-content :fullscreen=\"true\" class=\"ion-padding\">\n     <div class=\"notification-container\">\n         <ion-list>\n             <div class=\"notification-item-container\" v-for=\"(notif, index) in notification\" :key=\"index\">\n                 <ion-item lines=\"none\">\n                    <ion-label>{{notif.header}}</ion-label>\n                    <ion-toggle\n                        @ionChange=\"handleChange(notif.isChecked = $event.target.checked)\"\n                        :value=\"notif.value\"\n                        :checked=\"notif.isChecked\"\n                        color=\"primary\">\n                    </ion-toggle>\n                </ion-item>\n                <ion-note class=\"barefoot-color\">{{notif.subHeader}}</ion-note>\n             </div>\n       </ion-list>\n     </div>\n    </ion-content>\n  </ion-page>\n</template>\n\n<script lang=\"ts\">\nimport {\n  IonContent,\n  IonHeader,\n  IonPage,\n  IonTitle,\n  IonToolbar,\n  IonBackButton,\n  IonItem,\n  IonLabel,\n  IonToggle,\n  IonNote,\n} from \"@ionic/vue\";\n\nimport { computed, defineComponent, onMounted, ref } from \"vue\";\nimport { useRouter } from \"vue-router\";\nimport { useStore } from \"vuex\";\n\n\nexport default defineComponent({\n  components: {\n    IonContent,\n    IonHeader,\n    IonPage,\n    IonTitle,\n    IonToolbar,\n    IonBackButton,\n    IonItem,\n    IonLabel,\n    IonToggle,\n    IonNote,\n  },\n  setup() {\n      const router = useRouter()\n      const store = useStore()\n      const user = computed(() => store.state.users.user)\n      const notification = ref()\n      \n      onMounted(() => {\n          if(user.value.notifications) {\n              notification.value = JSON.parse(user.value.notifications)\n          } else {\n             notification.value = [\n                {\n                    header: 'New Messages',\n                    subHeader: 'Get notified by receiving new messages',\n                    value: 'new_messages',\n                    isChecked: true,\n                },\n                {\n                    header: 'Gift Receipt',\n                    subHeader: 'Get notified by receiving new gifts',\n                    value: 'gift_receipt',\n                    isChecked: true,\n                },\n                {\n                    header: 'New Friend',\n                    subHeader: 'Get notified by having new friends',\n                    value: 'new_friend',\n                    isChecked: true,\n                },\n                {\n                    header: 'New Bars',\n                    subHeader: 'Get notified if there are new bars nearby',\n                    value: 'new_bars',\n                    isChecked: true,\n                },\n                {\n                    header: 'New Restaurants',\n                    subHeader: 'Get notified if there are new restaurants nearby',\n                    value: 'new_restaurants',\n                    isChecked: true,\n                },\n                {\n                    header: 'New Events',\n                    subHeader: 'Get notified if there are new events nearby',\n                    value: 'new_events',\n                    isChecked: true,\n                }\n            ]\n          }\n      })\n      const handleChange = async (event: any) => {\n          await store.dispatch(\"users/updateNotifications\", notification.value);\n      }\n    return {\n        router,\n        notification,\n        handleChange,\n    };\n  },\n});\n</script>\n","\nimport {\n  IonContent,\n  IonHeader,\n  IonPage,\n  IonTitle,\n  IonToolbar,\n  IonBackButton,\n  IonItem,\n  IonLabel,\n  IonToggle,\n  IonNote,\n} from \"@ionic/vue\";\n\nimport { computed, defineComponent, onMounted, ref } from \"vue\";\nimport { useRouter } from \"vue-router\";\nimport { useStore } from \"vuex\";\n\n\nexport default defineComponent({\n  components: {\n    IonContent,\n    IonHeader,\n    IonPage,\n    IonTitle,\n    IonToolbar,\n    IonBackButton,\n    IonItem,\n    IonLabel,\n    IonToggle,\n    IonNote,\n  },\n  setup() {\n      const router = useRouter()\n      const store = useStore()\n      const user = computed(() => store.state.users.user)\n      const notification = ref()\n      \n      onMounted(() => {\n          if(user.value.notifications) {\n              notification.value = JSON.parse(user.value.notifications)\n          } else {\n             notification.value = [\n                {\n                    header: 'New Messages',\n                    subHeader: 'Get notified by receiving new messages',\n                    value: 'new_messages',\n                    isChecked: true,\n                },\n                {\n                    header: 'Gift Receipt',\n                    subHeader: 'Get notified by receiving new gifts',\n                    value: 'gift_receipt',\n                    isChecked: true,\n                },\n                {\n                    header: 'New Friend',\n                    subHeader: 'Get notified by having new friends',\n                    value: 'new_friend',\n                    isChecked: true,\n                },\n                {\n                    header: 'New Bars',\n                    subHeader: 'Get notified if there are new bars nearby',\n                    value: 'new_bars',\n                    isChecked: true,\n                },\n                {\n                    header: 'New Restaurants',\n                    subHeader: 'Get notified if there are new restaurants nearby',\n                    value: 'new_restaurants',\n                    isChecked: true,\n                },\n                {\n                    header: 'New Events',\n                    subHeader: 'Get notified if there are new events nearby',\n                    value: 'new_events',\n                    isChecked: true,\n                }\n            ]\n          }\n      })\n      const handleChange = async (event: any) => {\n          await store.dispatch(\"users/updateNotifications\", notification.value);\n      }\n    return {\n        router,\n        notification,\n        handleChange,\n    };\n  },\n});\n","import { render } from \"./Notification.vue?vue&type=template&id=312817bc\"\nimport script from \"./Notification.vue?vue&type=script&lang=ts\"\nexport * from \"./Notification.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}